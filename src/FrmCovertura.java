/*
 * Copyright (c) 2010, Oracle. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of Oracle nor the names of its contributors
 *   may be used to endorse or promote products derived from this software without
 *   specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

import java.util.Set;
import javax.swing.JFileChooser;
import javax.swing.table.TableColumn;
import javax.swing.table.DefaultTableModel;
import javax.swing.JTable;
import Structures.*;
import java.awt.Panel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import javax.swing.ImageIcon;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JLabel;
import javax.swing.Timer;

public class FrmCovertura extends javax.swing.JFrame {
    
    private  petryNetwork pn;
    private  int graphView;
    /**
     * Creates new form FrmCovertura
     */
    public FrmCovertura() {
        initComponents();
        graphView=1;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        postMatrix = new javax.swing.JTable();
        label1 = new java.awt.Label();
        label2 = new java.awt.Label();
        transitionsCounter = new javax.swing.JSpinner();
        placesCounter = new javax.swing.JSpinner();
        jScrollPane2 = new javax.swing.JScrollPane();
        preMatrix = new javax.swing.JTable();
        label3 = new java.awt.Label();
        label4 = new java.awt.Label();
        jScrollPane3 = new javax.swing.JScrollPane();
        m0Matrix = new javax.swing.JTable();
        label5 = new java.awt.Label();
        createPNGraph = new javax.swing.JButton();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0));
        PropertiesTextBox = new java.awt.TextArea();
        label6 = new java.awt.Label();
        toggleView = new javax.swing.JButton();
        uploadButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        panel2 = new java.awt.ScrollPane();
        jPanel4 = new javax.swing.JPanel();
        panel1 = new java.awt.ScrollPane();

        org.jdesktop.layout.GroupLayout jFrame1Layout = new org.jdesktop.layout.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("FrmCovertura");
        setSize(new java.awt.Dimension(1024, 768));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "PN Configuration", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 14))); // NOI18N
        jPanel1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel1.setName(""); // NOI18N

        postMatrix.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"0", "0", "1", "0", "0"},
                {"1", "0", "0", "0", "0"},
                {"0", "1", "0", "0", "0"},
                {"0", "0", "0", "0", "1"},
                {"1", "0", "0", "0", "0"},
                {"0", "0", "0", "1", "0"}
            },
            new String [] {
                "t1", "t2", "t3", "t4", "t5"
            }
        ));
        postMatrix.setRowHeight(18);
        postMatrix.getTableHeader().setResizingAllowed(false);
        postMatrix.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(postMatrix);

        label1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        label1.setText("TRANSITIONS");

        label2.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        label2.setText("PLACES");

        transitionsCounter.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(5), Integer.valueOf(1), null, Integer.valueOf(1)));
        transitionsCounter.setValue(5);
        transitionsCounter.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                transitionsCounterStateChanged(evt);
            }
        });

        placesCounter.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(6), Integer.valueOf(1), null, Integer.valueOf(1)));
        placesCounter.setToolTipText("");
        placesCounter.setValue(6);
        placesCounter.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                placesCounterStateChanged(evt);
            }
        });

        preMatrix.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"1", "0", "0", "0", "0"},
                {"0", "1", "0", "0", "0"},
                {"0", "0", "1", "0", "0"},
                {"1", "0", "0", "0", "0"},
                {"0", "0", "0", "1", "0"},
                {"0", "0", "0", "0", "1"}
            },
            new String [] {
                "t1", "t2", "t3", "t4", "t5"
            }
        ));
        preMatrix.setRowHeight(18);
        preMatrix.getTableHeader().setResizingAllowed(false);
        preMatrix.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(preMatrix);

        label3.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        label3.setText("PRE MATRIX");

        label4.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        label4.setText("POST MATRIX");

        m0Matrix.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"1"},
                {"0"},
                {"0"},
                {"1"},
                {"0"},
                {"0"}
            },
            new String [] {
                "MARKING"
            }
        ));
        m0Matrix.setRowHeight(18);
        m0Matrix.getTableHeader().setResizingAllowed(false);
        m0Matrix.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(m0Matrix);

        label5.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        label5.setText("INIT. MARKING");

        createPNGraph.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        createPNGraph.setText("Create PN Graph");
        createPNGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createPNGraphActionPerformed(evt);
            }
        });

        PropertiesTextBox.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N

        label6.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        label6.setText("PROPERTIES");

        toggleView.setText("Toggle Coverage Graph View");
        toggleView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleViewActionPerformed(evt);
            }
        });

        uploadButton.setText("Upload Example");
        uploadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(36, 36, 36)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(label1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(label2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(transitionsCounter)
                            .add(placesCounter, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 52, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(40, 40, 40))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(toggleView, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(createPNGraph, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(uploadButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .add(18, 18, 18)))
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(label3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 208, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(label4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 208, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 65, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(label5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(label6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(0, 0, Short.MAX_VALUE))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(10, 10, 10)
                        .add(PropertiesTextBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE)))
                .addContainerGap())
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(filler1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(462, 462, 462))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(label1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(transitionsCounter, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(label2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(placesCounter, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(36, 36, 36)
                        .add(createPNGraph)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(uploadButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(toggleView))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(label3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(6, 6, 6)
                        .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 164, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(label4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(6, 6, 6)
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 164, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(filler1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(label5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(label6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 164, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(PropertiesTextBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 164, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(0, 0, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Coverage Graph", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 14))); // NOI18N
        jPanel2.setAutoscrolls(true);

        panel2.setBackground(java.awt.Color.white);

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(panel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, panel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "PN Graph", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 14))); // NOI18N
        jPanel4.setAutoscrolls(true);

        panel1.setBackground(java.awt.Color.white);

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, panel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(panel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel1.getAccessibleContext().setAccessibleName("Pre_Matrix");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // Set columns width in preMatrix and postMatrix tables
        updateColumnWidth();
        //transitionsCounter.setValue(3);
        //placesCounter.setValue(3);

    }//GEN-LAST:event_formComponentShown

    private void transitionsCounterStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_transitionsCounterStateChanged
        // Add remove transitions (columns) to the tables.
        int colVal = Integer.parseInt(transitionsCounter.getValue().toString());
        int nCol = preMatrix.getColumnModel().getColumnCount();
        TableColumn tcolPre = new TableColumn();
        TableColumn tcolPost = new TableColumn();
        DefaultTableModel preMatrixModel = (DefaultTableModel) preMatrix.getModel();
        DefaultTableModel postMatrixModel = (DefaultTableModel) postMatrix.getModel();

        nCol = (nCol < 1) ? 1 : nCol;

        if (nCol < colVal) { //Agregar Columnas
            preMatrixModel.addColumn("t" + (nCol+1));
            postMatrixModel.addColumn("t" + (nCol+1));

            for (int i = 0; i < preMatrixModel.getRowCount(); i++) {
                preMatrixModel.setValueAt("0", i, preMatrixModel.getColumnCount() - 1);
                postMatrixModel.setValueAt("0", i, preMatrixModel.getColumnCount() - 1);
            }
        } else if (nCol > colVal) { //Remover Columnas            
            removeColumn(nCol - 1, preMatrix);
            removeColumn(nCol - 1, postMatrix);
        }
        updateColumnWidth();
    }//GEN-LAST:event_transitionsCounterStateChanged

    private void placesCounterStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_placesCounterStateChanged
        // Add remove places (rows) to the tables.
        int rowVal = Integer.parseInt(placesCounter.getValue().toString());
        int nRow = preMatrix.getModel().getRowCount();

        nRow = (nRow < 1) ? 1 : nRow;

        if (nRow < rowVal) { //Agregar Columnas
            DefaultTableModel model = (DefaultTableModel) preMatrix.getModel();
            model.addRow(new Object[]{});

            for (int i = 0; i < model.getColumnCount(); i++) {
                model.setValueAt("0", model.getRowCount() - 1, i);
            }

            model = (DefaultTableModel) postMatrix.getModel();
            model.addRow(new Object[]{});

            for (int i = 0; i < model.getColumnCount(); i++) {
                model.setValueAt("0", model.getRowCount() - 1, i);
            }

            model = (DefaultTableModel) m0Matrix.getModel();
            model.addRow(new Object[]{});

            model.setValueAt("0", model.getRowCount() - 1, 0);

        } else if (nRow > rowVal) { //Remover Columnas            
            removeRows(nRow - 1, preMatrix);
            removeRows(nRow - 1, postMatrix);
            removeRows(nRow - 1, m0Matrix);
        }

        updateColumnWidth();
    }//GEN-LAST:event_placesCounterStateChanged

    private void createPNGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createPNGraphActionPerformed
        // Initializes Petry Network Object called "pn": Do not modify.
        pn = new petryNetwork(Integer.parseInt(placesCounter.getValue().toString()),
                Integer.parseInt(transitionsCounter.getValue().toString()));
        
        int nRows = Integer.parseInt(placesCounter.getValue().toString());
        int nCols = Integer.parseInt(transitionsCounter.getValue().toString());
        
        panel1.removeAll();
        panel2.removeAll();
        
        //Loads the preMatrix  data onto the pn object: Do not modify.
        for (int colIndex = 0; colIndex < nCols; colIndex++) {
            for (int rowIndex = 0; rowIndex < nRows; rowIndex++) {
                int value = Integer.parseInt(preMatrix.getValueAt(rowIndex, colIndex).toString());
                pn.setPreValue(rowIndex, colIndex, value);
            }
        }
        //Loads the postMatrix  data onto the pn object: Do not modify.
        for (int colIndex = 0; colIndex < nCols; colIndex++) {
            for (int rowIndex = 0; rowIndex < nRows; rowIndex++) {
                int value = Integer.parseInt(postMatrix.getValueAt(rowIndex, colIndex).toString());
                pn.setPostValue(rowIndex, colIndex, value);
            }
        }
        //Loads the inital marking (m0) data onto the pn object: Do not modify.      
        for (int rowIndex = 0; rowIndex < nRows; rowIndex++) {
            int value = Integer.parseInt(m0Matrix.getValueAt(rowIndex, 0).toString());
            pn.setm0(rowIndex, value);
        }
        //Print loaded data for debugging puposes: Do not modify.
        pn.printPreMatrix();
        pn.printPostMatrix();
        pn.printm0Matrix();
        pn.printIncidenceMatrix();
        // Drop additional code down below .................................. //
        Graph gcover = pn.getCoverGraph();    
        Graph gcoverTarjan = pn.getTarjanCoverGraph();    
    
        makeGraph(pn.getPre(), pn.getPost());
        //makeCoverGraph(gcover);
        
        if (graphView == 1){
            makeCoverGraph(gcoverTarjan);
        }
        else{
            makeCoverGraph(gcover);            
        }
        
        //Compute Strongly Connected Components...............................//
        List<List<Node>> scc = pn.Tarjan(gcoverTarjan);
               
        
        //Print PN properties...................................................
        this.PropertiesTextBox.setText("");
        this.PropertiesTextBox.append("Is PN Bounded? ");
        this.PropertiesTextBox.append(Boolean.toString(pn.isPNBounded()) + "\n");
        
        this.PropertiesTextBox.append("PN Bound? ");
        if (pn.getMaxBoundValue()== Integer.MAX_VALUE){
            this.PropertiesTextBox.append("Inf" + "\n");
        }else{
            this.PropertiesTextBox.append(Integer.toString(pn.getMaxBoundValue()) + "\n");
        }
        
        this.PropertiesTextBox.append("Is PN Blockage Free? ");
        this.PropertiesTextBox.append(Boolean.toString(pn.isPNBlockageFree()) + "\n");
        
        this.PropertiesTextBox.append("Is PN Strictly conservative? ");
        this.PropertiesTextBox.append(Boolean.toString(pn.isPNEstrictlyConservative())+ "\n");
        
        this.PropertiesTextBox.append("Is PN Repetitive? ");
        this.PropertiesTextBox.append(Boolean.toString(pn.isPNRepetitive(scc)) + "\n");
        
        this.PropertiesTextBox.append("Is PN Reversible? ");
        this.PropertiesTextBox.append(Boolean.toString(pn.isPNReversible(scc, pn.getTarjanCoverGraph())) + "\n");
        
        this.PropertiesTextBox.append("Is PN Liveness? ");
        this.PropertiesTextBox.append(Boolean.toString(pn.isPNLiveness(scc)) + "\n");
        
        this.PropertiesTextBox.append("\nNumber of SCC:?" + Integer.toString(scc.size())+ "\n");
        
        for (int i=0 ; i < scc.size(); i++){
            this.PropertiesTextBox.append("Nodes in SCC[" + Integer.toString(i+1) +"]: ");
            for (int j=0 ; j < scc.get(i).size(); j++){
                Node node = scc.get(i).get(j);
                this.PropertiesTextBox.append(node.getId() + ", ");                
            }
        }
        
        
    }//GEN-LAST:event_createPNGraphActionPerformed

    private void toggleViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleViewActionPerformed
        // TODO add your handling code here:
        
        Graph myGraph;
        if (graphView == 1){
            myGraph =pn.getCoverGraph();
            if(myGraph!=null)
                makeCoverGraph(myGraph);
            graphView=0;
        }
        else{
            myGraph =pn.getTarjanCoverGraph();
            if(myGraph!=null)
                makeCoverGraph(myGraph);
            graphView=1;
        }
    }//GEN-LAST:event_toggleViewActionPerformed

    private void uploadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadButtonActionPerformed
       JFileChooser fc = new JFileChooser();
       
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            
            System.out.println("Abre: "+file.getName());
            String matrices = "";
            String text="";
            List<String[]> auxPre2 = new ArrayList<String[]>();
            List<String[]> auxPost2 = new ArrayList<String[]>();

            try {
                Scanner s = new Scanner(file);
                while(s.hasNextLine()){
                    text += s.nextLine();
                }
                String aux[] = text.split("\\|");
                String auxPre[]=aux[0].split(" ");
                String auxPost[]=aux[1].split(" ");
                
                for(int i=0;i<auxPre.length;i++){
                    auxPre2.add(auxPre[i].split(","));
                }
                for(int i=0;i<auxPost.length;i++){
                    auxPost2.add(auxPost[i].split(","));
                }
                               
                int[][] pre = new int[auxPre.length][auxPre2.get(0).length];
                int[][] post = new int[auxPost.length][auxPost2.get(0).length];
                
                for(int i=0;i<auxPre.length;i++){
                        for(int j=0; j<auxPre2.get(i).length;j++){
                            pre[i][j]= Integer.parseInt(auxPre2.get(i)[j]);
                        }
                }
                for(int i=0;i<auxPost.length;i++){
                        for(int j=0; j<auxPost2.get(i).length;j++){
                            post[i][j]=Integer.parseInt(auxPost2.get(i)[j]);
                        }
                }
                
                Object myObjectPre[][]=new Object[pre.length][pre[0].length];                
                String miStringPre[] = new String[pre[0].length];
                for(int i=0;i<pre.length;i++){
                    for(int j=0;j<pre[0].length;j++){
                        myObjectPre[i][j]=pre[i][j];
                        miStringPre[j]="t"+(j+1);
                    }
                }
                DefaultTableModel newTablaPre = new DefaultTableModel(myObjectPre,miStringPre);
                preMatrix.setModel(newTablaPre);
                
                Object myObjectPost[][]= new Object[post.length][post[0].length];                
                String miStringPost[] = new String[post[0].length];
                for(int i=0;i<post.length;i++){
                    for(int j=0;j<post[0].length;j++){
                        myObjectPost[i][j]=post[i][j];
                        miStringPost[j]="t"+(j+1);
                    }
                }
                DefaultTableModel newTablaPost = new DefaultTableModel(myObjectPost,miStringPost);
                postMatrix.setModel(newTablaPost);
                
                Object myObjectM0[][]= new Object[post.length][1];                
                String miStringM0[] = new String[1];
                
                    for(int j=0;j<post.length;j++){
                        myObjectM0[j][0]=0;
                    }
                    miStringM0[0]="MARKING";
                DefaultTableModel newTablaM0 = new DefaultTableModel(myObjectM0,miStringM0);
                m0Matrix.setModel(newTablaM0);
                
                placesCounter.setValue(pre.length);
                transitionsCounter.setValue(pre[0].length);
            } catch (FileNotFoundException ex) {Logger.getLogger(FrmCovertura.class.getName()).log(Level.SEVERE, null, ex);}
        } else {}
    }//GEN-LAST:event_uploadButtonActionPerformed
    public void makeCoverGraph(Graph gcover) {
        System.out.println(""+gcover.getNodes().size());
        
        String nombreArchivo = "CoverGraph";
        String content = "digraph CoverGraph          {\n"
                //+ "rankdir=LR;"
                + //girar a la derecha
                //"# page = \"8.2677165,11.692913\" ;\n" +
                "ratio = \"auto\" ;\n"
                + "mincross = 6.0 ;\n";

        for(int i=0;i<gcover.getNodes().size();i++){
            content = content + "\"" + gcover.getNodes().get(i).getMarkString() + "\" [shape=box,label=\"" + gcover.getNodes().get(i).getMarkString() + "\",height=.1,width=.1] ;\n";
        }
        
        for(int i=0;i<gcover.getNodes().size();i++){
            //System.out.println(""+gcover.getNodes().get(i).getParent().getMarkString()+"->"+gcover.getNodes().get(i).getMarkString()+"sda");           
            for(int j=0;j<gcover.getNodes().get(i).getTransitions().size();j++){
                //System.out.println(""+gcover.getNodes().get(i).getMarkString()+"->"+gcover.getNodes().get(i).getTransitions().get(j).getEnd().getMarkString()+" : "+gcover.getNodes().get(i).getTransitions().get(j).getId());
                content = content + "\"" + gcover.getNodes().get(i).getMarkString() + "\" -> \"" + gcover.getNodes().get(i).getTransitions().get(j).getEnd().getMarkString() + "\" [dir=normal,weight=1,label = \""+gcover.getNodes().get(i).getTransitions().get(j).getId()+"\"] ;\n";
            }
        }
              
        content = content + "}";
        //System.out.print(content);
        FileUtils.write(nombreArchivo, content, "txt");
        FileUtils.generateImg(nombreArchivo, "png");

        //new GraphFrame(nombreArchivo);
        BufferedImage img = null;
        JLabel picLabel = null;
        try {
            img = ImageIO.read(new File("CoverGraph.png"));
            picLabel = new JLabel(new ImageIcon(img));
        } catch (IOException ex) {
            Logger.getLogger(FrmCovertura.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        panel2.removeAll();
        panel2.add(picLabel);
        //panel2.add(new GraphJPanel("CoverGraph",panel2.getWidth(),panel2.getHeight()));
        panel2.repaint();
        
    }
    public void makeGraph(int[][] mpre, int[][] mpost) {
        String nombreArchivo = "PetriNetwork";
        String content = "digraph PetriNetwork          {\n"
                + "rankdir=LR;"
                + //girar a la derecha
                //"# page = \"8.2677165,11.692913\" ;\n" +
                "ratio = \"auto\" ;\n"
                + "mincross = 6.0 ;\n";

        int[][] pre = mpre;
        int[][] post = mpost;

        for (int i = 0; i < pre.length; i++) {
            //Se instancias las P
            content = content + "\"P" + (i+1) + "\" [shape=circle  , regular=1,style=filled,fillcolor=white] ;\n";
        }
        for (int i = 0; i < pre[0].length; i++) {
            //Se instancias las T
            content = content + "\"t" + (i+1) + "\" [shape=box,label=\"t" + (i+1) + "\",height=.1,width=.1] ;\n";
        }
        String label = "";
        for (int i = 0; i < pre.length; i++) {
            //Se Instancian las P
            for (int j = 0; j < pre[0].length; j++) {
                //Se generan las transiciones
                if (pre[i][j] > 0) {//de P's  a T's
                    label = (pre[i][j] == 1)? "": String.valueOf(pre[i][j]);
                    content = content + "\"P" + (i+1) + "\" -> \"t" + (j+1) + "\" [dir=normal,weight=1, label=\""+label+"\"] ;\n";
                }
                if (post[i][j] > 0) {//de T's  a P's
                    label = (post[i][j] == 1)? "": String.valueOf(post[i][j]);
                    content = content + "\"t" + (j+1) + "\" -> \"P" + (i+1) + "\" [dir=normal,weight=1, label=\""+label+"\"] ;\n";
                }
            }
        }
        content = content + "}";
        //System.out.print(content);
        FileUtils.write(nombreArchivo, content, "txt");
        FileUtils.generateImg(nombreArchivo, "png");
        
        BufferedImage img;
        JLabel picLabel = null;
        try {
            img = ImageIO.read(new File("PetriNetwork.png"));
            picLabel = new JLabel(new ImageIcon(img));
        } catch (IOException ex) {
            Logger.getLogger(FrmCovertura.class.getName()).log(Level.SEVERE, null, ex);
        }
        //new GraphFrame(nombreArchivo);
        panel1.removeAll();
        panel1.add(picLabel);
        //panel1.add(new GraphJPanel("PetriNetwork",panel1.getWidth(),panel1.getHeight()));
        panel1.repaint();
    }

    private void updateColumnWidth() {
        TableColumn column;
        for (int i = 0; i < this.preMatrix.getColumnModel().getColumnCount(); i++) {
            column = this.preMatrix.getColumnModel().getColumn(i);
            column.setMaxWidth(30);
            column = this.postMatrix.getColumnModel().getColumn(i);
            column.setMaxWidth(30);
        }
        preMatrix.updateUI();
        postMatrix.updateUI();
    }

    private void removeColumn(int index, JTable myTable) {
        int nRow = myTable.getRowCount();
        int nCol = myTable.getColumnCount();

        if ((nCol > 0)) {
            Object[][] cells = new Object[Integer.parseInt(placesCounter.getValue().toString())][nCol - 1];
            String[] names = new String[nCol - 1];

            for (int j = 0; j < nCol - 1; j++) {
                names[j] = myTable.getColumnModel().getColumn(j).getHeaderValue().toString();
                for (int i = 0; i < nRow; i++) {
                    cells[i][j] = myTable.getValueAt(i, j);
                }
            }

            DefaultTableModel newModel = new DefaultTableModel(cells, names);
            myTable.setModel(newModel);
        }
    }

    private void removeRows(int index, JTable myTable) {
        int nRow = myTable.getRowCount();
        int nCol = myTable.getColumnCount();

        if (nRow > 0) {
            Object[][] cells = new Object[Integer.parseInt(placesCounter.getValue().toString())][nCol];
            String[] names = new String[nCol];

            for (int j = 0; j < nCol; j++) {
                names[j] = myTable.getColumnModel().getColumn(j).getHeaderValue().toString();
                for (int i = 0; i < nRow - 1; i++) {
                    cells[i][j] = myTable.getValueAt(i, j);
                }
            }

            DefaultTableModel newModel = new DefaultTableModel(cells, names);
            myTable.setModel(newModel);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            javax.swing.UIManager.LookAndFeelInfo[] installedLookAndFeels = javax.swing.UIManager.getInstalledLookAndFeels();
            for (int idx = 0; idx < installedLookAndFeels.length; idx++) {
                if ("Nimbus".equals(installedLookAndFeels[idx].getName())) {
                    javax.swing.UIManager.setLookAndFeel(installedLookAndFeels[idx].getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmCovertura.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmCovertura.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmCovertura.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmCovertura.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmCovertura().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.TextArea PropertiesTextBox;
    private javax.swing.JButton createPNGraph;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private java.awt.Label label1;
    private java.awt.Label label2;
    private java.awt.Label label3;
    private java.awt.Label label4;
    private java.awt.Label label5;
    private java.awt.Label label6;
    private javax.swing.JTable m0Matrix;
    private java.awt.ScrollPane panel1;
    private java.awt.ScrollPane panel2;
    private javax.swing.JSpinner placesCounter;
    private javax.swing.JTable postMatrix;
    private javax.swing.JTable preMatrix;
    private javax.swing.JButton toggleView;
    private javax.swing.JSpinner transitionsCounter;
    private javax.swing.JButton uploadButton;
    // End of variables declaration//GEN-END:variables
}
